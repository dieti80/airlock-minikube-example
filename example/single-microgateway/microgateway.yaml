---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microgateway
  labels:
    app: microgateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: microgateway
  template:
    metadata:
      labels:
        app: microgateway
    spec:
      imagePullSecrets:
        - name: dockerregcred
      initContainers:
        - name: configbuilder
          image: docker.ergon.ch/airlock-pd-waf/airlock-microgateway-configbuilder:latest
          imagePullPolicy: Always
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: generic-parameters
                  key: TZ
            - name: ALG_CFG_OPERATIONAL_MODE
              value: integration
          volumeMounts:
            - name: config
              mountPath: /config/config.yaml
              subPath: config.yaml
              readOnly: true
            - name: secret
              mountPath: /secret/config/
              readOnly: true
            - name: data
              mountPath: /config/templates/
              subPath: microgateway/mapping-templates
            - name: config-files
              mountPath: /resources-gen
      containers:
        - name: microgateway-echoserver
          image: docker.ergon.ch/airlock-pd-waf/airlock-microgateway:latest
          imagePullPolicy: Always
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: generic-parameters
                  key: TZ
          ports:
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: config-files
              mountPath: /config/
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 30
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data-claim
        - name: config
          configMap:
            name: microgateway-config
        - name: secret
          secret:
            secretName: microgateway-secret
        - name: config-files
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: microgateway
  labels:
    app: microgateway
spec:
  selector:
    app: microgateway
  ports:
    - name: https
      port: 8443
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microgateway-config
data:
  config.yaml: |
    license_file: /secret/config/license

    log:
      level: info

    session:
      redis_hosts:
      - 'redis:6379'
      store_mode: server
      encryption_passphrase_file: /secret/config/passphrase

    expert_settings:
      apache: |
        RemoteIPHeader x-real-ip
        RemoteIPInternalProxy 10.0.0.0/8
        RemoteIPInternalProxy 172.16.0.0/12
        RemoteIPInternalProxy 192.168.0.0/16
      security_gate: |
        # TODO:
        # Needed until AP-21937 is available.
        # Attention: Request Header Whitelist must allow this header
        Request.Logging.Headers.Enable        "TRUE"
        Request.Logging.Headers.Mode          "request"
        Request.Logging.Headers.Pattern       "^x-request-id:"
        Request.Logging.Headers.IgnoreCase    "TRUE"
        Request.Logging.Headers.InvertPattern "FALSE"

    apps:
    - virtual_host:
        name: vh
        expert_settings:
          apache: |
            # default redirect
            RewriteRule ^/$ https://%{ENV:HTTP_HOST_NOPORT}/auth/portal [R=303,NE]
      mappings:
      - name: echoserver
        entry_path: /
        session_handling: enforce_session
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        threat_handling: notify
        deny_rule_groups:
        - level: strict
          enabled: true
        expert_settings:
          security_gate: |
            Backend.AddEnvironmentCookies         "TRUE"
            Cookie.PassthroughSelector.Pattern    "^.*$"
            Cookie.PassthroughSelector.IgnoreCase "TRUE"
        backend:
          name: beg-echoserver
          hosts:
          - protocol: 'http'
            name: echoserver
            port: 8080
      - name: adminer
        entry_path: /adminer/
        session_handling: enforce_session
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        threat_handling: block
        deny_rule_groups:
        - level: basic
        auth:
          flow: redirect
          denied_access_url: /auth/check-login
          access:
          - roles:
            - authenticated
        backend:
          name: beg-adminer
          hosts:
          - protocol: 'http'
          - name: adminer
          - port: 8080
      - name: kibana
        entry_path: /kibana/
        session_handling: enforce_session
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        deny_rule_groups:
        - level: basic
        limits:
          json_limits:
            max_value_length: 819200
        auth:
          flow: redirect
          denied_access_url: /auth/check-login
          access:
          - roles:
            - authenticated
        backend:
          name: beg-kibana
          hosts:
          - protocol: 'http'
            name: kibana
            port: 5601
      - name: iam-loginapp
        mapping_template_file: /config/templates/loginapp-7.3.xml
        entry_path: /auth/
        backend_path: /auth-login/
        session_handling: enforce_session
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        expert_settings:
          security_gate: |
            # TODO:
            # Not required anymore with: ALMICRO-467
            CsrfTokens.Enable    "FALSE"

            RedirectForErrorPage "FALSE"
        backend:
          name: beg-iam
          hosts:
          - protocol: 'https'
            name: iam
            port: 8443
      - name: iam-loginapp-rest-public
        mapping_template_file: /config/templates/loginapp-7.3-REST-public.xml
        entry_path: /auth/rest/public
        backend_path: /auth-login/rest/public
        session_handling: enforce_session
        api_security:
          openapi:
            spec_file: /config/templates/login-rest-openapi.json
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        expert_settings:
          security_gate: |
            RedirectForErrorPage "FALSE"
        backend:
          name: beg-iam
          hosts:
          - protocol: 'https'
            name: iam
            port: 8443
      - name: iam-loginapp-rest-protected
        mapping_template_file: /config/templates/loginapp-7.3-REST-protected.xml
        entry_path: /auth/rest/protected
        backend_path: /auth-login/rest/protected
        session_handling: enforce_session
        api_security:
          openapi:
            spec_file: /config/templates/login-rest-openapi.json
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        expert_settings:
          security_gate: |
            RedirectForErrorPage "FALSE"
        backend:
          name: beg-iam
          hosts:
          - protocol: 'https'
            name: iam
            port: 8443
      - name: admin
        mapping_template_file: /config/templates/adminapp-7.3.xml
        entry_path: /auth-admin/
        session_handling: enforce_session
        operational_mode: @@ALG_CFG_OPERATIONAL_MODE@@
        expert_settings:
          security_gate: |
            RedirectForErrorPage "FALSE"
        backend:
          name: beg-iam
          hosts:
          - protocol: 'https'
            name: iam
            port: 8443

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-microgateway
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: https
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: microgateway
                port:
                  number: 8443
